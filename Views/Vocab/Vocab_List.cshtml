@model IEnumerable<study4_be.Models.ViewModel.VocabListViewModel>

<style>
    .item {
        overflow: hidden;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        max-width: 100px
    }

    .text-btn-admin {
        text-decoration: none;
        color: white;
    }

    .search__input {
        width: 100%;
        padding: 10px;
    }

    .adSearch__container {
        display: flex;
        margin: 20px 0px;
    }

    #searchByContainerTitle, #searchByUnitTitle, #searchByCourseTitle, #searchByLessonTitle {
        margin: 0px 10px;
    }
</style>

<h2 style="text-align:center">LIST VOCABS</h2>
<input id="searchInput" class="search__input col-11" type="text" placeholder="Search anything you want..." />
<div class="adSearch__container">
    <span>Container Title: </span>
    <select id="searchByContainerTitle">
        <option value="">All</option>
    </select>
    <span>Unit Title: </span>
    <select id="searchByUnitTitle">
        <option value="">All</option>
    </select>
    <span>Course Title: </span>
    <select id="searchByCourseTitle">
        <option value="">All</option>
    </select>
    <span>Lesson Title: </span>
    <select id="searchByLessonTitle">
        <option value="">All</option>
    </select>
</div>
<button class="btn btn-block btn-lg btn-gradient-primary mt-4"> @Html.ActionLink("+ Add Vocab", "Vocab_Create", "Vocab", null, new { @class = "text-btn-admin" })</button>
<div class="card">
    <div class="card-body">
        <table class="table">
            <thead class="table-info">
                <tr>
                    <th>Vocab Id</th>
                    <th>Vocab Title</th>
                    <th>Vocab Type</th>
                    <th>Mean</th>
                    <th>Example</th>
                    <th>Explanation</th>
                    <th>AudioUrl Uk</th>
                    <th>Tag</th>
                    <th>Lesson Title </th>
                    <th>Container Tittle</th>
                    <th>Unit Tittle</th>
                    <th>Course Tittle</th>
                    <th>Options</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var vocab in Model)
                {
                    <tr>
                        <td class="item">
                            <p>@vocab.vocab.VocabId</p>
                        </td>
                        <td class="item">
                            <p>@vocab.vocab.VocabTitle</p>
                        </td>
                        <td class="item">
                            <p>@vocab.vocab.VocabType</p>
                        </td>
                        <td class="item">
                            <p>@vocab.vocab.Mean</p>
                        </td>
                        <td class="item">
                            <p>@vocab.vocab.Example</p>
                        </td>
                        <td class="item">
                            <p>@vocab.vocab.Explanation</p>
                        </td>
                        <td class="item">
                            <p>@vocab.vocab.AudioUrlUk</p>
                        </td>
                        <td class="item">
                            <p>@vocab.vocab.Lesson.TagId</p>
                        </td>
                        <td class="item">
                            <p>@vocab.vocab.Lesson.LessonTitle</p>
                        </td>

                        <td class="item">
                            <p>@vocab.containerTittle</p>
                        </td>

                        <td class="item">
                            <p>@vocab.unitTittle</p>
                        </td>

                        <td class="item">
                            <p>@vocab.courseName</p>
                        </td>
                        <td>
                            <a href="@Url.ActionLink("Vocab_Edit","Vocab",new { id = vocab.vocab.VocabId })" class="text-link-action">Sửa</a>
                            <span style="padding:0 8px">|</span>
                            <a href="@Url.ActionLink("Vocab_Delete","Vocab",new { id = vocab.vocab.VocabId })" class="text-link-action">Xóa</a>
                            <span style="padding:0 8px">|</span>
                            <a href="@Url.ActionLink("Vocab_Details","Vocab",new { id = vocab.vocab.VocabId })" class="text-link-action">Chi tiết</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script>
    function getUniqueValues(columnIndex) {
        var values = [];
        var table = document.querySelector('.table tbody');
        var tr = table.getElementsByTagName('tr');

        for (var i = 0; i < tr.length; i++) {
            var td = tr[i].getElementsByTagName('td')[columnIndex];
            if (td) {
                var txtValue = td.textContent || td.innerText;
                if (values.indexOf(txtValue) === -1) {
                    values.push(txtValue);
                }
            }
        }
        return values.sort();
    }

    function populateSelect(id, values) {
        var select = document.getElementById(id);
        values.forEach(function (value) {
            var option = document.createElement('option');
            option.text = value;
            option.value = value;
            select.add(option);
        });
    }

    function populateDropdowns() {
        populateSelect('searchByContainerTitle', getUniqueValues(9));
        populateSelect('searchByUnitTitle', getUniqueValues(10));
        populateSelect('searchByCourseTitle', getUniqueValues(11));
        populateSelect('searchByLessonTitle', getUniqueValues(8));
    }

    function filterTable() {
        var searchInput = document.getElementById('searchInput').value.toUpperCase();
        var searchByContainerTitle = document.getElementById('searchByContainerTitle').value.toUpperCase();
        var searchByUnitTitle = document.getElementById('searchByUnitTitle').value.toUpperCase();
        var searchByCourseTitle = document.getElementById('searchByCourseTitle').value.toUpperCase();
        var searchByLessonTitle = document.getElementById('searchByLessonTitle').value.toUpperCase();

        var table = document.querySelector('.table tbody');
        var tr = table.getElementsByTagName('tr');

        for (var i = 0; i < tr.length; i++) {
            var tdVocabTitle = tr[i].getElementsByTagName('td')[1];
            var tdContainerTitle = tr[i].getElementsByTagName('td')[9];
            var tdUnitTitle = tr[i].getElementsByTagName('td')[10];
            var tdCourseTitle = tr[i].getElementsByTagName('td')[11];
            var tdLessonTitle = tr[i].getElementsByTagName('td')[8];

            if (tdVocabTitle || tdContainerTitle || tdUnitTitle || tdCourseTitle || tdLessonTitle) {
                var txtValueVocabTitle = tdVocabTitle.textContent || tdVocabTitle.innerText;
                var txtValueContainerTitle = tdContainerTitle.textContent || tdContainerTitle.innerText;
                var txtValueUnitTitle = tdUnitTitle.textContent || tdUnitTitle.innerText;
                var txtValueCourseTitle = tdCourseTitle.textContent || tdCourseTitle.innerText;
                var txtValueLessonTitle = tdLessonTitle.textContent || tdLessonTitle.innerText;

                if (
                    (txtValueVocabTitle.toUpperCase().indexOf(searchInput) > -1 || !searchInput) &&
                    (txtValueContainerTitle.toUpperCase().indexOf(searchByContainerTitle) > -1 || !searchByContainerTitle) &&
                    (txtValueUnitTitle.toUpperCase().indexOf(searchByUnitTitle) > -1 || !searchByUnitTitle) &&
                    (txtValueCourseTitle.toUpperCase().indexOf(searchByCourseTitle) > -1 || !searchByCourseTitle) &&
                    (txtValueLessonTitle.toUpperCase().indexOf(searchByLessonTitle) > -1 || !searchByLessonTitle)
                ) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }

    document.getElementById('searchInput').addEventListener('keyup', filterTable);
    document.getElementById('searchByContainerTitle').addEventListener('change', filterTable);
    document.getElementById('searchByUnitTitle').addEventListener('change', filterTable);
    document.getElementById('searchByCourseTitle').addEventListener('change', filterTable);
    document.getElementById('searchByLessonTitle').addEventListener('change', filterTable);

    window.onload = populateDropdowns;
</script>